%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "symbol.h"
#include "absyn.h"


int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
  S_symbol sym;
  A_exp exp;
  A_var var;
  A_dec dec;
  A_ty ty;
  A_decList decList;
  A_expList expList;
  A_field field;
  A_fieldList fieldList;
  A_fundec fundec;
  A_fundecList fundecList;
  A_namety namety;
  A_nametyList nametyList;
  A_efield efield;
  A_efieldList efieldList;
}

%token <sval> ID STRING
%token <ival> INT

%type <exp> exp
%type <var> lvalue
%type <expList> exprlist
%type <expList> exprseq
%type <efieldList> fieldlist
%type <decList> declist
%type <dec> dec
%type <dec> typedeclist
%type <namety> typedec
%type <ty> typ
%type <fieldList> typefields
%type <field> typefield
%type <dec> vardec
%type <dec> funcdeclist
%type <fundec> funcdec
%type <sym> id


%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%nonassoc LOW
%nonassoc ASSIGN LBRACK OF TYPE FUNCTION
%nonassoc THEN
%nonassoc ELSE
%nonassoc DO 
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%start program

%%

program:	exp  {absyn_root = $1;}
          ;

exp:   INT  {$$ = A_IntExp(EM_tokPos, $1);}
          | STRING {$$ = A_StringExp(EM_tokPos, $1);}
          | NIL {$$ = A_NilExp(EM_tokPos);}
          | lvalue  {$$ = A_VarExp(EM_tokPos, $1);}
          | exp PLUS exp  {$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
          | exp MINUS exp {$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
          | exp TIMES exp {$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
          | exp DIVIDE exp  {$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
          | exp EQ exp  {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
          | exp NEQ exp {$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
          | exp LT exp  {$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
          | exp LE exp  {$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
          | exp GT exp  {$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
          | exp GE exp  {$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}
          | exp AND exp {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
          | exp OR exp  {$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3);}
          | MINUS exp %prec UMINUS {$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
          | lvalue ASSIGN exp {$$ = A_AssignExp(EM_tokPos, $1, $3);}
          | id LPAREN exprlist RPAREN {$$ = A_CallExp(EM_tokPos, $1, $3);}
          | id LPAREN RPAREN {$$ = A_CallExp(EM_tokPos, $1, NULL);}
          | LPAREN exprseq RPAREN {$$ = A_SeqExp(EM_tokPos, $2);}
          | LPAREN RPAREN {$$ = A_SeqExp(EM_tokPos, NULL);}
          | id LBRACE fieldlist RBRACE {$$ = A_RecordExp(EM_tokPos, $1, $3);}
          | id LBRACE RBRACE {$$ = A_RecordExp(EM_tokPos, $1, NULL);}
          | id LBRACK exp RBRACK OF exp {$$ = A_ArrayExp(EM_tokPos, $1, $3, $6);}
          | BREAK {$$ = A_BreakExp(EM_tokPos);}
          | IF exp THEN exp {$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}
          | IF exp THEN exp ELSE exp {$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
          | WHILE exp DO exp {$$ = A_WhileExp(EM_tokPos, $2, $4);}
          | FOR id ASSIGN exp TO exp DO exp {$$ = A_ForExp(EM_tokPos, $2, $4, $6, $8);}
          | LET declist IN exprseq END {$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}
          | LET declist IN END {$$ = A_LetExp(EM_tokPos, $2, NULL);}
          ;
exprlist:   exp {$$ = A_ExpList($1, NULL);}
          | exp COMMA exprlist {$$ = A_ExpList($1, $3);}
          ;
exprseq:    exp {$$ = A_ExpList($1, NULL);}
          | exp SEMICOLON exprseq {$$ = A_ExpList($1, $3);}
          ;
lvalue:   id %prec LOW {$$ = A_SimpleVar(EM_tokPos, $1);}
          | lvalue DOT id   {$$ = A_FieldVar(EM_tokPos, $1, $3);}
          | lvalue LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, $1, $3);}
          | id LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, $1), $3);}
          ; 
fieldlist:  id EQ exp {$$ = A_EfieldList(A_Efield($1, $3), NULL);}
          | id EQ exp COMMA fieldlist {$$ = A_EfieldList(A_Efield($1, $3), $5);}
          ;
declist:  dec {$$ = A_DecList($1, NULL);}
          | dec declist {$$ = A_DecList($1, $2);}
          ;
dec:      typedeclist {$$ = $1;}
          | vardec {$$ = $1;}
          | funcdeclist {$$ = $1;}
          ;
typedeclist:  typedec %prec LOW {$$ = A_TypeDec(EM_tokPos, A_NametyList($1, NULL));}
              | typedec typedeclist {$$ = A_TypeDec(EM_tokPos, A_NametyList($1, $2->u.type));}
              ;
typedec:  TYPE id EQ typ {$$ = A_Namety($2, $4);}
          ;
typ:     id {$$ = A_NameTy(EM_tokPos, $1);}
          | LBRACE typefields RBRACE {$$ = A_RecordTy(EM_tokPos, $2);}
          | LBRACE RBRACE {$$ = A_RecordTy(EM_tokPos, NULL);}
          | ARRAY OF id {$$ = A_ArrayTy(EM_tokPos, $3);}
          ;
typefields: typefield {$$ = A_FieldList($1, NULL);}
            | typefield COMMA typefields {$$ = A_FieldList($1, $3);}
            ;
typefield:  id COLON id {$$ = A_Field(EM_tokPos, $1, $3);}
            ;
vardec:     VAR id ASSIGN exp {$$ = A_VarDec(EM_tokPos, $2, NULL, $4);}
            | VAR id COLON id ASSIGN exp {$$ = A_VarDec(EM_tokPos, $2, $4, $6);}
            ;
funcdeclist:  funcdec %prec LOW {$$ = A_FunctionDec(EM_tokPos, A_FundecList($1, NULL));}
              | funcdec funcdeclist {$$ = A_FunctionDec(EM_tokPos, A_FundecList($1, $2->u.function));}
              ;
funcdec: FUNCTION id LPAREN typefields RPAREN EQ exp {$$ = A_Fundec(EM_tokPos, $2, $4, NULL, $7);}
         | FUNCTION id LPAREN RPAREN EQ exp {$$ = A_Fundec(EM_tokPos, $2, NULL, NULL, $6);}
         | FUNCTION id LPAREN typefields RPAREN COLON id EQ exp {$$ = A_Fundec(EM_tokPos, $2, $4, $7, $9);}
         | FUNCTION id LPAREN RPAREN COLON id EQ exp {$$ = A_Fundec(EM_tokPos, $2, NULL, $6, $8);}
         ;
id:      ID {$$ = S_Symbol($1);}
         ;



	
